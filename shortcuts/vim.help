
// Basics
[sc] :e filename
[def] Open filename for edition

[sc] :w
[def] Save file

[sc] :q
[def] Exit Vim

[sc] :w!
[def] Write file and quit


// Search
[sc] /word
[def] Search word from top to bottom

[sc] ?word
[def] Search word from bottom to top

[sc] /jo[ha]n
[def] Search john or joan

[sc] /\< the
[def] Search the, theatre or then

[sc] /the\>
[def] Search the or breathe

[sc] /\< the\>
[def] Search the

[sc] /\< |.\>
[def] Search all words of 4 letters

[sc] /\/
[def] Search fred but not alfred or frederick

[sc] /fred\|joe
[def] Search fred or joe

[sc] /\<\d\d\d\d\>
[def] Search exactly 4 digits

[sc] /^\n\{3}
[def] Find 3 empty lines

[sc] :bufdo /searchstr/
[def] Search in all open files

[sc] /\v^.+(^.*MUST BE.*$)@<!$
[def] Search all lines not containing text 'MUST BE' in it. \v option set escaping opertators like + or ) not needed. @<! operator is negative look-behind

[sc] /^\(.*\)\n\1$
[def] Search duplicated lines in text

[sc] <C-R> /
[def] Copy from search register, last searched term


// Replace
[sc] :%s/old/new/g
[def] Replace all occurences of old by new in file

[sc] :%s/old/new/gw
[def] Replace all occurences with confirmation

[sc] :2,35s/old/new/g
[def] Replace all occurences between lines 2 and 35

[sc] :5,$s/old/new/g
[def] Replace all occurences from line 5 to EOF

[sc] :%s/^/hello/g
[def] Replace the begining of each line by hello

[sc] :%s/$/Harry/g
[def] Replace the end of each line by Harry

[sc] :%s/onward/forward/gi
[def] Replace onward by forward, case unsensitive

[sc] :%s/ *$//g
[def] Delete all white spaces

[sc] :g/string/d
[def] Delete all lines containing string

[sc] :v/string/d
[def] Delete all lines containing which didn’t contain string

[sc] :s/Bill/Steve/
[def] Replace the first occurence of Bill by Steve in current line

[sc] :s/Bill/Steve/g
[def] Replace Bill by Steve in current line

[sc] :%s/Bill/Steve/g
[def] Replace Bill by Steve in all the file

[sc] :%s/\r//g
[def] Delete DOS carriage returns (^M)

[sc] :%s/\r/\r/g
[def] Transform DOS carriage returns in returns

[sc] :%s#<[^>]\+>##g
[def] Delete HTML tags but keeps text

[sc] :%s/^\(.*\)\n\1$/\1/
[def] Delete lines which appears twice

[sc] Ctrl+a
[def] Increment number under the cursor

[sc] Ctrl+x
[def] Decrement number under cursor

[sc] ggVGg?
[def] Change text to Rot13

[sc] :g/.*#.*/p
[def] Will print all lines containing # character

[sc] :% g/foo/s/bar/zzz/g
[def]for every line containing "foo" substitute all "bar" with "zzz."

[sc] :'a,'bg/foo/j
[def] to join any line containing the string foo to its subsequent line, if it lies between the lines between the 'a' and 'b' marks



// Case
[sc] Vu
[def] Lowercase line

[sc] VU
[def] Uppercase line

[sc] g~~
[def] Invert case

[sc] vEU
[def] Switch word to uppercase

[sc] vE~
[def] Modify word case

[sc] ggguG
[def] Set all text to lowercase

[sc] :set ignorecase
[def] Ignore case in searches

[sc] :set smartcase
[def] Ignore case in searches excepted if an uppercase letter is used

[sc] :%s/\<./\u&/g
[def] Sets first letter of each word to uppercase

[sc] :%s/\<./\l&/g
[def] Sets first letter of each word to lowercase

[sc] :%s/.*/\u&
[def] Sets first letter of each line to uppercase

[sc] :%s/.*/\l&
[def] Sets first letter of each line to lowercase


// Read/Write files
[sc] :1,10 w outfile
[def] Saves lines 1 to 10 in outfile

[sc] :1,10 w >> outfile
[def] Appends lines 1 to 10 to outfile

[sc] :r infile
[def] Read and Insert the content of infile

[sc] :23r infile
[def] Read and Insert the content of infile under line 23

[sc] :r! <cmd>
[def] read an aoutput of a command into the current Buffer



// File explorer
[sc] :e .
[def] Open integrated file explorer

[sc] :Sex
[def] Split window and open integrated file explorer

[sc] :browse e
[def] Graphical file explorer

[sc] :ls
[def] List buffers

[sc] :cd ..
[def] Move to parent directory

[sc] :args
[def] List files

[sc] :args *.php
[def] Open file list

[sc] :grep expression *.php
[def] Returns a list of .php files contening expression

[sc] gf
[def] Open file name under cursor


// Interact with Unix
[sc] :!pwd
[def] Execute the pwd unix command, then returns to Vi

[sc] !!pwd
[def] Execute the pwd unix command and insert output in file

[sc] :sh
[def] Temporary returns to Unix

[sc] $exit
[def] Retourns to Vi


// Alignment
[sc] :%!fmt
[def] Align all lines

[sc] !}fmt
[def] Align all lines at the current position

[sc] 5!!fmt
[def] Align the next 5 lines


// Tabs
[sc] :tabnew
[def] Creates a new tab

[sc] gt
[def] Show next tab

[sc] :tabfirst
[def] Show first tab

[sc] :tablast
[def] Show last tab

[sc] :tabm n(position)
[def] Rearrange tabs

[sc] :tabdo %s/foo/bar/g
[def] Execute a command in all tabs

[sc] :tab ball
[def] Puts all open files in tabs


// Window spliting
[sc] :e filename
[def] Edit filename in current window

[sc] :split filename
[def] Split the window and open filename

[sc] ctrl-w up arrow
[def] Puts cursor in top window

[sc] ctrl-w ctrl-w
[def] Puts cursor in next window

[sc] ctrl-w_
[def] Maximise current window

[sc] ctrl-w=
[def] Gives the same size to all windows

[sc] 10 ctrl-w+
[def] Add 10 lines to current window

[sc] :vsplit file
[def] Split window vertically

[sc] :sview file
[def] Same as :split in readonly mode

[sc] :hide
[def] Close current window

[sc] :­nly
[def] Close all windows, excepted current

[sc] :b 2
[def] Open #2 in this window


// Auto-completion
[sc] Ctrl+n Ctrl+p (in insert mode)
[def] Complete word

[sc] Ctrl+x Ctrl+l
[def] Complete line

[sc] :set dictionary=dict
[def] Define dict as a dictionnary

[sc] Ctrl+x Ctrl+k
[def] Complete with dictionnary


// Marks
[sc] mk
[def] Marks current position as k

[sc] ˜k
[def] Moves cursor to mark k

[sc] d™k
[def] Delete all until mark k


// Abbreviations
[sc] :ab mail mail@provider.org
[def] Define mail as abbreviation of mail@provider.org


// Text indent
[sc] :set autoindent
[def] Turn on auto-indent

[sc] :set smartindent
[def] Turn on intelligent auto-indent

[sc] :set shiftwidth=4
[def] Defines 4 spaces as indent size

[sc] ctrl-t, ctrl-d
[def] Indent/un-indent in insert mode

[sc] >>
[def] Indent

[sc] <<
[def] Un-indent


// Syntax highlighting
[sc] :syntax on
[def] Turn on syntax highlighting

[sc] :syntax off
[def] Turn off syntax highlighting

[sc] :set syntax=perl
[def] Force syntax highlighting


// Selection
[sc] gv
[def] Repeat last selection, reselect previous selection


// Spell
[sc] ,ss
[def] toggle on\off spelling in current buffer

[sc] ]s
[def] Go to next misspelled word

[sc] [s
[def] Go to previous misspelled word

[sc] z=
[def] for word under the cursor, suggest correctyl spelled words.



// NERDTree
[sc] o, <CR>
[def] Open files, directories and bookmarks

[sc] go
[def] Open selected file, but leave cursor in the NERDTree

[sc] t
[def] Open selected node/bookmark in a new tab

[sc] T
[def] Same as 't' but keep the focus on the current tab

[sc] i
[def] Open selected file in a split window

[sc] gi
[def] Same as i, but leave the cursor on the NERDTree

[sc] s
[def] Open selected file in a new vsplit

[sc] gs
[def] Same as s, but leave the cursor on the NERDTree

[sc] O
[def] Recursively open the selected directory

[sc] x
[def] Close the current nodes parent

[sc] X
[def] Recursively close all children of the current node

[sc] e
[def] Edit the current dir

[sc] D
[def] Delete the current bookmark

[sc] P
[def] Jump to the root node

[sc] p
[def] Jump to current nodes parent

[sc] K
[def] Jump up inside directories at the current tree depth

[sc] J
[def] Jump down inside directories at the current tree depth

[sc] <C-J>
[def] Jump down to the next sibling of the current directory

[sc] <C-K>
[def] Jump up to the previous sibling of the current directory

[sc] C
[def] Change the tree root to the selected dir

[sc] u
[def] Move the tree root up one directory

[sc] U
[def] Same as 'u' except the old root node is left open

[sc] r
[def] Recursively refresh the current directory

[sc] R
[def] Recursively refresh the current root

[sc] m
[def] Display the NERD tree menu

[sc] cd
[def] Change the CWD to the dir of the selected node

[sc] CD
[def] Change tree root to the CWD

[sc] I
[def] Toggle whether hidden files displayed

[sc] f
[def] Toggle whether the file filters are used

[sc] F
[def] Toggle whether files are displayed

[sc] B
[def] Toggle whether the bookmark table is displayed

[sc] q
[def] Close the NERDTree window

[sc] A
[def] Zoom (maximize/minimize) the NERDTree window

[sc] ?
[def] Toggle the display of the quick help


// VIM_SURROUND
// [Normal mode]
[sc] ds
[def] delete a surrounding

[sc] cs
[def] change a surrounding

[sc] ys
[def] add a surrounding

[sc] yS
[def] add a surrounding and place the surrounded text on a new line + indent it

[sc] yss
[def] add a surrounding to the whole line

[sc] ySs
[def] add a surrounding to the whole line, place it on a new line + indent it

[sc] ySS
[def] same as ySs


// [Visual mode]
[sc] s
[def] in visual mode, add a surrounding

[sc] S
[def] in visual mode, add a surrounding but place text on new line + indent it


// [Insert mode]
[sc] <CTRL-s><CTRL-g>s
[def] in insert mode, add a surrounding

[sc] <CTRL-s><CTRL-s> OR <CTRL-g>S
[def] in insert mode, add a new line + surrounding + indent


//Session man
[sc] :SessionOpen
[def] command takes a session name as an argument.  It supports argument completion.

:SessionOpenLast command opens the g:LAST_SESSION session (see above).
:SessionClose command wipes out all buffers, kills cscope and clears variables with session name.
:SessionSave command saves the current editing session.  If v:this_session is empty it asks for a session name.
:SessionSaveAs command takes a session name as an optional argument.  If there is no argument or it is empty, it asks for a session name (default is the last part of v:this_session).
:SessionShowLast command shows the content of the g:LAST_SESSION and v:this_session variables.

// vim-notes
[sc] :Note
[def] command to create a new buffer and load the appropriate file type and syntax

[sc] :Note
[def]edit a note containing anything in its title (if no notes are found a new one is created with its title set to anything)

[sc] :DeleteNote
[def] command enables you to delete the current note

[sc] :SearchNotes
[def] keyword searches for keywords and :SearchNotes /pattern/ searches for regular expressions

[sc] :RecentNotes
[def] command lists your notes by modification date, starting

  with the most recently edited note

// NERD Commenter
[sc] <leader>cc
[def] Comment out the current line or text selected in visual mode.

[sc] <leader>cn
[def] Same as <leader>cc but forces nesting.

[sc] <leader>c
[def] Toggles the comment state of the selected line(s). If the topmost selected line is commented, all selected lines are uncommented and vice versa.

[sc] <leader>cm
[def] Comments the given lines using only one set of multipart delimiters.

[sc] <leader>ci
[def] Toggles the comment state of the selected line(s) individually.

[sc] <leader>cs
[def] Comments out the selected lines ``sexily''

[sc] <leader>cy
[def] Same as <leader>cc except that the commented line(s) are yanked first.

[sc] <leader>c$
[def] Comments the current line from the cursor to the end of line.

[sc] <leader>cA
[def] Adds comment delimiters to the end of line and goes into insert mode between them.

[sc]
[def] Adds comment delimiters at the current cursor position and inserts between. Disabled by default.

[sc] <leader>ca
[def] Switches to the alternative set of delimiters.

[sc] <leader>cl | [count]<leader>cb
[def] Same as  except that the delimiters are aligned down the left side (<leader>cl) or both sides (<leader>cb).

[sc] <leader>cu
[def] Uncomments the selected line(s).


// VIM - Fuggitive - GIT in VIM
[sc] :Git [args]
[def] Run an arbitrary git command. Similar to :!git [args] but chdir to the repository tree first.

[sc] :Git! [args]
[def] Like |:Git|, but capture the output into a temp file, and edit that temp file.

[sc] :Gcd [directory]
[def] |:cd| relative to the repository.

[sc] :Glcd [directory]
[def] |:lcd| relative to the repository.

:Gstatus                Bring up the output of git-status in the preview window.  The following maps, which work on the cursor line file where sensible, are provided:
[sc] :Gcommit [args]
[def] A wrapper around git-commit.  If there is nothing to commit, |:Gstatus| is called instead.  Unless the arguments given would skip the invocation of an editor (e.g., -m), a split window will be used to obtain a commit message.  Write and close that window (:wq or |:Gwrite|) to finish the commit.  Unlike when running the actual git-commit command, it is possible (but unadvisable) to muck with the index with commands like git-add and git-reset while a commit message is pending.

[sc] :Ggrep [args]
[def] |:grep| with git-grep as 'grepprg'.

[sc] :Glgrep [args]
[def] |:lgrep| with git-grep as 'grepprg'.

[sc] :Glog [args]
[def] Load all previous revisions of the current file into the quickfix list.  Additional git-log arguments can be given (for example, --reverse).  If "--" appears as an argument, no file specific filtering is done, and previous commits rather than previous file revisions are loaded.

[sc] :Gllog [args]
[def] Like |:Glog|, but use the location list instead of the quickfix list.

[sc] :Gedit [revision]
[def] |:edit| a |fugitive-revision|.

[sc] :Gsplit [revision]
[def] |:split| a |fugitive-revision|.

[sc] :Gvsplit [revision]
[def] |:vsplit| a |fugitive-revision|.

[sc] :Gtabedit [revision]
[def] |:tabedit| a |fugitive-revision|.

[sc] :Gpedit [revision]
[def] |:pedit| a |fugitive-revision|.

[sc] :Gsplit! [args]
[def] *fugitive-:Gsplit!* *fugitive-:Gvsplit!*

[sc] :Gvsplit! [args]
[def] *fugitive-:Gtabedit!* *fugitive-:Gpedit!*

[sc] :Gtabedit! [args]
[def] Like |:Git!|, but open the resulting temp file in a

[sc] :Gpedit! [args]
[def] split, tab, or preview window.

[sc] :Gread [revision]
[def] Empty the buffer and |:read| a |fugitive-revision|.  When the argument is omitted, this is similar to git-checkout on a work tree file or git-add on a stage file, but without writing anything to disk.

[sc] :{range}Gread [revision]
[def] |:read| in a |fugitive-revision| after {range}.

[sc] :Gread! [args]
[def] Empty the buffer and |:read| the output of a Git command.  For example, :Gread! show HEAD:%.

[sc] :{range}Gread! [args]
[def] |:read| the output of a Git command after {range}.

[sc] :Gwrite
[def] Write to the current file's path and stage the results.  When run in a work tree file, it is effectively git add.  Elsewhere, it is effectively git-checkout.  A great deal of effort is expended to behave sensibly when the work tree or index version of the file is open in another buffer.

[sc] :Gwrite {path}
[def] You can give |:Gwrite| an explicit path of where in the work tree to write.  You can also give a path like :0:foo.txt or even :0 to write to just that stage in the index.

[sc] :Gwq [path]
[def] Like |:Gwrite| followed by |:quit| if the write succeeded.

[sc] :Gwq! [path]
[def] Like |:Gwrite|! followed by |:quit|! if the write succeeded.

[sc] :Gdiff [revision]
[def] Perform a |vimdiff| against the current file in the given revision.  With no argument, the version in the index is used (which means a three-way diff during a merge conflict, making it a git-mergetool alternative).  The newer of the two files is placed to the right.  Use |do| and |dp| and write to the index file to simulate "git add --patch".

[sc] :Gsdiff [revision]
[def] Like |:Gdiff|, but split horizontally.

[sc] :Gvdiff [revision]
[def] Identical to |:Gdiff|.  For symmetry with |:Gsdiff|.

[sc] :Gmove {destination}
[def] Wrapper around git-mv that renames the buffer afterward.  The destination is relative to the current directory except when started with a /, in which case it is relative to the work tree.  Add a ! to pass -f.

[sc] :Gremove
[def] Wrapper around git-rm that deletes the buffer afterward.  When invoked in an index file, --cached is passed.  Add a ! to pass -f and forcefully discard the buffer.

[sc] :Gblame [flags]
[def] Run git-blame on the file and open the results in a scroll bound vertical split.  Press enter on a line to reblame the file as it was in that commit.  You can give any of ltfnsewMC as flags and they will be passed along to git-blame.  The following maps, which work on the cursor line commit where sensible, are provided:

[sc] :[range]Gblame [flags]
[def] Run git-blame on the given range.

[sc] :[range]Gbrowse
[def] If the remote for the current branch is on GitHub, open the current file, blob, tree, commit, or tag (with git-web--browse) on GitHub.  Otherwise, open the current file, blob, tree, commit, or tag in git-instaweb (if you have issues, verify you can run "git instaweb" from a terminal).  If a range is given, it is appropriately appended to the URL as an anchor.

[sc] :[range]Gbrowse!
[def] Like :Gbrowse, but put the URL on the clipboard rather than opening it.

[sc] :[range]Gbrowse {revision}
[def] Like :Gbrowse, but for a given |fugitive-revision|.  A useful value here is -, which ties the URL to the latest commit rather than a volatile branch.

[sc] :[range]Gbrowse [...]@{remote}
[def] Force using the given remote rather than the remote for the current branch.  The remote is used to determine which GitHub repository to link to.



// Vim - Notes
[sc] @
[def] automatically triggers tag completion

[sc] '
[def] becomes ‘ or ’ depending on where you type it

[sc] "
[def] becomes “ or ” (same goes for these)

[sc] --
[def] becomes —

[sc] ->
[def] becomes →

[sc] <-
[def] becomes ←

[sc] * - +
[def] become •

[sc] ***
[def] the three characters *** in insert mode in quick succession insert a horizontal ruler delimited by empty lines

[sc] Tab and Alt-Right
[def] increase indentation of list items (works on the current line and selected lines)

[sc] Shift-Tab and Alt-Left
[def] decrease indentation of list items

[sc] *<cr>
[def] Enter on a line with only a list bullet removes the bullet and starts a new line below the current line

[sc] \en
[def] executes :NoteFromSelectedText

[sc] \sn
[def] executes :SplitNoteFromSelectedText

[sc] \tn
[def] executes :TabNoteFromSelectedText


